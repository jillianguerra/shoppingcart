const request = require('supertest')
const mongoose = require('mongoose')
const { MongoMemoryServer } = require('mongodb-memory-server')
const app = require('../app')
const server = app.listen(6060, () => console.log(`Boil em mash em 6060`))
const Cart = require('../models/cart')
const User = require('../models/user')
const Item = require('../models/item')
let mongoServer

beforeAll(async () => {
    mongoServer = await MongoMemoryServer.create()
    await mongoose.connect(mongoServer.getUri())
})

afterAll(async () => {
    await mongoose.connection.close()
    mongoServer.stop()
    server.close()
})


describe('Test the cart endpoints', () => {
    test('It should create a new cart', async () => {
        const user = new User({ name: 'Aragorn Son of Arathorn', email: 'strider@email.com', password: 'iloveelves', loggedIn: true })
        await user.save()
        const token = await user.generateAuthToken()
        console.log(token)
        const response = await request(app)
        .post('/cart/new')
        .set(`Authorization`, `Bearer ${token}`)
        .send({ user: user._id })
    expect(response.statusCode).toBe(200)
    })
    test('It should update a cart', async () => {
        const user = new User({ name: 'Gollum', email: 'myprecious@email.com', password: 'ilovethatring' })
        await user.save()
        const token = await user.generateAuthToken()
        const item = new Item({ name: 'the one ring', description: `It rules them all`, category: 'jewlery', price: 800 })
        await item.save()
        const item2 = new Item({ name: 'tasty fish', description: `It's raw and wiggling`, category: 'seafood', price: 5 })
        const cart = new Cart({ user: user._id, items: [item] })
        await cart.save()
        const response = await request(app)
            .put(`/cart/${cart._id}`)
            .set(`Authorization`, `Bearer ${token}`)
            .send({ items: [item2] })
        expect(response.statusCode).toBe(200)
        expect(response.body.items).toContain(item2)
    })
    test('It should display items in the cart and the total', async () => {
        const user = new User({ name: 'Gimli son of Gloin', email: 'bestaxwarrior@email.com', password: 'iloveaxes' })
        await user.save()
        const token = await user.generateAuthToken()
        const item1 = new Item({ name: 'fancy ax', description: `It's like an ax but so much fancier!`, category: 'weapons', price: 500 })
        await item1.save()
        const item2 = new Item({ name: 'dwarf armor', description: 'extra short and extra stout', category: 'armor', price: 500 })
        await item2.save()
        const cart = new Cart({ user: user._id, items: [item1, item2] })
        await cart.save()
        const response = await request(app)
            .get(`/cart/${cart._id}`)
            .set(`Authorization`, `Bearer ${token}`)
        console.log(response.body)
        expect(JSON.stringify(response.body.items[0])).toEqual(JSON.stringify(cart.items[0]._id).replace(/\\"/g, '"'))
       // expect(response.body.items).toEqual(cart.items)
        expect(response.body.total).toEqual(1000)
    })
    test('It should delete an cart', async () => {
        const user = new User({ name: 'Boromir', email: 'gondorknight@email.com', password: 'ilovehobbits' })
        await user.save()
        const token = await user.generateAuthToken()
        const cart = new Cart({ user: user._id, items: []})
        await cart.save()
        const response = await request(app)
            .delete(`/cart/${cart._id}`)
            .set(`Authorization`, `Bearer ${token}`)
        expect(response.statusCode).toBe(204)
    })
})