const request = require('supertest')
const mongoose = require('mongoose')
const { MongoMemoryServer } = require('mongodb-memory-server')
const app = require('../app')
const server = app.listen(6060, () => console.log(`Flying to 6060`))
const Cart = require('../models/cart')
const User = require('../models/user')
const Item = require('../models/item')
let mongoServer

beforeAll(async () => {
    mongoServer = await MongoMemoryServer.create()
    await mongoose.connect(mongoServer.getUri())
})

afterAll(async () => {
    await mongoose.connection.close()
    mongoServer.stop()
    server.close()
})


describe('Test the cart endpoints', () => {
    test('It should create a new cart', async () => {
        const user = new User({ name: 'Gandolf the Grey', email: 'greywizard@email.com', password: 'ilovehobbits' })
        await user.save()
        const response = await request(app)
        .post('/cart/new')
        .send({ user: user._id })
    expect(response.statusCode).toBe(200)
    expect(response.body.user).toEqual(user._id)
    })
    test('It should update a cart', async () => {
        const user = new User({ name: 'Gandolf the Grey', email: 'greywizard@email.com', password: 'ilovehobbits' })
        await user.save()
        const item1 = new Item({ name: 'fancy lamp', description: `It's like a lamp but so much fancier!`, category: 'lighting', price: 200 })
        await item1.save()
        const item2 = new Item({ name: 'lamp', description: 'stop sitting in the dark and get a lamp!', category: 'lighting', price: 40 })
        await item2.save()
        const cart = new Cart({ user: user._id, items: [item1, item2]})
        await cart.save()
        const response = await request(app)
            .put(`/cart/${cart._id}`)
            .send({ 'items.lamp.quantity': 2 })
        expect(response.body.items).toContain(item2)
        expect(response.body.items.lamp.quantity).toEqual(2)
    })
    test('It should display items in the cart and the total', async () => {
        const user = new User({ name: 'Gandolf the Grey', email: 'greywizard@email.com', password: 'ilovehobbits' })
        await user.save()
        const item1 = new Item({ name: 'fancy lamp', description: `It's like a lamp but so much fancier!`, category: 'lighting', price: 200 })
        await item1.save()
        const item2 = new Item({ name: 'lamp', description: 'stop sitting in the dark and get a lamp!', category: 'lighting', price: 40 })
        await item2.save()
        const cart = new Cart({ user: user._id, items: [item1, item2]})
        await cart.save()
        const response = await request(app)
            .get(`/cart/${cart._id}`)
    expect(response.body.total).toEqual(240)
    expect(response.body.items).toContain(item1)
    expect(response.body.items).toContain(item2)
    })
    test('It should delete an cart', async () => {
        const user = new User({ name: 'Gandolf the Grey', email: 'greywizard@email.com', password: 'ilovehobbits' })
        await user.save()
        const cart = new Cart({ user: user._id, items: []})
        await cart.save()
        const response = await request(app)
            .delete(`/cart/${cart._id}`)
        expect(response.statusCode).toBe(204)
    })
})