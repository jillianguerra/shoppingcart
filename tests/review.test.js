const request = require('supertest')
const mongoose = require('mongoose')
const { MongoMemoryServer } = require('mongodb-memory-server')
const app = require('../app')
const server = app.listen(9090, () => console.log(`Of course you are, and I'm coming with 9090`))
const Review = require('../models/review')
const Item = require('../models/item')
const User = require('../models/user')
let mongoServer

beforeAll(async () => {
    mongoServer = await MongoMemoryServer.create()
    await mongoose.connect(mongoServer.getUri())
})

afterAll(async () => {
    await mongoose.connection.close()
    mongoServer.stop()
    server.close()
})

describe('Test the review endpoints', () => {
    test('It should create a new review', async () => {
        const user = new User({ name: 'Eowyn', email: 'ladyknight@email.com', password: 'fightingdreamer' })
        await user.save()
        const token = await user.generateAuthToken()
        const item = new Item({ name: 'sword', description: `combat ready`, category: 'weapons', price: 500 })
        await item.save()
        const response = await request(app)
            .post(`/items/${item._id}/reviews`)
            .set(`Authorization`, `Bearer ${token}`)
            .send({ rating: 4, body: `it's pretty good` })
        expect(response.statusCode).toBe(200)
        expect(response.body.review.rating).toEqual(4)
        expect(response.body.review.body).toEqual(`it's pretty good`)
    })
    test('It should update a review instead of making a new one.', async () => {
        const item = new Item({ name: 'the one ring', description: 'rules them all', category: 'jewelry', price: 1000000 })
        await item.save()
        const user = new User({ name: 'Bilbo Baggins', email: 'ogbaggins@email.com', password: 'theytookmyring' })
        await user.save()
        const token = await user.generateAuthToken()
        const review = new Review({ item: item._id, user: user._id, rating: 5, body: `stopped aging. neat.` })
        await review.save()
        user.reviews = [review._id]
        await user.save()
        item.reviews = [review._id]
        await item.save()
        const response = await request(app)
            .post(`/items/${item._id}/reviews`)
            .set(`Authorization`, `Bearer ${token}`)
            .send({ rating: 3, body: `Gandolf took it and now I'm old` })
        expect(response.statusCode).toBe(200)
        expect(response.body.review.rating).toEqual(3)
        expect(response.body.review.body).toEqual(`Gandolf took it and now I'm old`)
    })
    test('It should update a review', async () => {
        const item = new Item({ name: 'the one ring', description: 'rules them all', category: 'jewelry', price: 1000000 })
        await item.save()
        const user = new User({ name: 'Galadriel', email: 'ladyofthewoods@email.com', password: 'cateblanchett' })
        await user.save()
        const token = await user.generateAuthToken()
        const review = new Review({ item: item._id, user: user._id, rating: 5, body: `so powerful` })
        await review.save()
        user.reviews = [review._id]
        await user.save()
        item.reviews = [review._id]
        await item.save()
        const response = await request(app)
            .put(`/items/${item._id}/reviews`)
            .set(`Authorization`, `Bearer ${token}`)
            .send({ rating: 1, body: `it made me want to kill Frodo` })
        expect(response.statusCode).toBe(200)
        expect(response.body.review.rating).toEqual(1)
        expect(response.body.review.body).toEqual(`it made me want to kill Frodo`)
    })
    test('It should delete a review', async () => {
        const item = new Item({ name: 'lembas bread', description: `you only need one bite`, category: 'food', price: 7 })
        await item.save()
        const user = new User({ name: 'Elrond', email: 'lordofrivendell@email.com', password: 'halfelffullking' })
        await user.save()
        const token = await user.generateAuthToken()
        const review = new Review({ item: item._id, user: user._id, rating: 4, body: `it just tastes like bread.` })
        await review.save()
        user.reviews = [review._id]
        await user.save()
        item.reviews = [review._id]
        await item.save()
        const response = await request(app)
            .delete(`/items/${item._id}/reviews`)
            .set(`Authorization`, `Bearer ${token}`)
        expect(response.statusCode).toBe(200)
        expect(response.body.message).toEqual(`Poof!`)
        expect.objectContaining(item)
    })
    test('It should show reviews for an item', async () => {
        const item = new Item({ name: 'the one ring', description: 'rules them all', category: 'jewelry', price: 1000000 })
        await item.save()
        const user1 = new User({ name: 'Frodo Baggins', email: 'bagginsboy@email.com', password: 'ilovesam' })
        await user1.save()
        const user2 = new User({ name: 'Gollum', email: 'myprecious@email.com', password: 'ilovethatring' })
        await user2.save()
        const review1 = new Review({ item: item._id, user: user1._id, rating: 1, body: `it's such a burden` })
        await review1.save()
        const review2 = new Review({ item: item._id, user: user2._id, rating: 5, body: `my precious!!` })
        await review2.save()
        item.reviews = [ review1._id, review2._id ]
        await item.save()
        const response = await request(app)
            .get(`/items/${item._id}/reviews`)
        expect.objectContaining(review1)
        expect.objectContaining(review2)
    })
    test('It should display all reviews from a user', async() => {
        const user = new User({ name: `Frodo Baggins`, email: `frodo@email.com`, password: `elijahwood` })
        await user.save()
        const item1 = new Item({ name: `Aragorn's sword`, description: 'you have it', category: 'weapons', price: 500 })
        await item1.save()
        const item2 = new Item({ name: `Legolas' bow`, description: 'and you have it', category: 'weapons', price: 500 })
        await item2.save()
        const item3 = new Item({ name: `Ghimli's ax`, description: `and you have it`, category: 'weapons', price: 500 })
        await item3.save()
        const review1 = new Review({ item: item1._id, user: user._id, rating: 2, body: `literally didn't help me` })
        await review1.save()
        const review2 = new Review({ item: item2._id, user: user._id, rating: 1, body: `he's only spoken to me once` })
        await review2.save()
        const review3 = new Review({ item: item3._id, user: user._id, rating: 1, body: `Ghimli is just comic relief` })
        await review3.save()
        user.reviews = [review1._id, review2._id, review3._id]
        await user.save()
        const response = await request(app)
            .get(`/users/${user._id}/reviews`)
        expect(response.statusCode).toBe(200)
        expect.objectContaining(review1)
        expect.objectContaining(review2)
        expect.objectContaining(review3)
    })
})